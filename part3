
logical -> physical map : page tables
     each process gets a page table
     page size = 2^k
     logical = L
     page # = L/2^k
     offset d = L % 2^k

#A -> mem -> push -># create page table ?

t, K -> get pid.table 
-> # append to frame fifo
^
size of memory in POOLED jobs, sort descending, try to push


device# -> # starting loc -> # currentPCB.getphysical

"S" 
    display page table for processes


"S m"

   new option. should display system memory information. Frame table with a free frame list.


SPECIFICATIONS

#total size of memory
#max size of process
#size of a page

#Page = 2^k
#total size of memory % Page = 0

=======================

#"A" -> Process size in words
#A.size > total size of memory -> reject
#A.size > size of a page -> reject

A.size > remaining memory -> JOB POOL

After memory is released... (Largest that will fit)
cpu.remaining memory < GREATESTSIZEDJOBPOOLITEM.size -> dispatch from JOB POOL to READY QUEUE

[device]# -> Starting loc in memory -> logical HEX [0...f]+ 
-> MAP TO PHYSICAL
